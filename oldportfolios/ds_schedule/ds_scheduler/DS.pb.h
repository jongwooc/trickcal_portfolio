// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DS.proto

#ifndef PROTOBUF_DS_2eproto__INCLUDED
#define PROTOBUF_DS_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_DS_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsnetwork_LayerImpl();
void InitDefaultsnetwork_Layer();
void InitDefaultsnetworkImpl();
void InitDefaultsnetwork();
inline void InitDefaults() {
  InitDefaultsnetwork_Layer();
  InitDefaultsnetwork();
}
}  // namespace protobuf_DS_2eproto
namespace DS {
class network;
class networkDefaultTypeInternal;
extern networkDefaultTypeInternal _network_default_instance_;
class network_Layer;
class network_LayerDefaultTypeInternal;
extern network_LayerDefaultTypeInternal _network_Layer_default_instance_;
}  // namespace DS
namespace DS {

// ===================================================================

class network_Layer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DS.network.Layer) */ {
 public:
  network_Layer();
  virtual ~network_Layer();

  network_Layer(const network_Layer& from);

  inline network_Layer& operator=(const network_Layer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  network_Layer(network_Layer&& from) noexcept
    : network_Layer() {
    *this = ::std::move(from);
  }

  inline network_Layer& operator=(network_Layer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const network_Layer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const network_Layer* internal_default_instance() {
    return reinterpret_cast<const network_Layer*>(
               &_network_Layer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(network_Layer* other);
  friend void swap(network_Layer& a, network_Layer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline network_Layer* New() const PROTOBUF_FINAL { return New(NULL); }

  network_Layer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const network_Layer& from);
  void MergeFrom(const network_Layer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(network_Layer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string time_unit = 2;
  bool has_time_unit() const;
  void clear_time_unit();
  static const int kTimeUnitFieldNumber = 2;
  const ::std::string& time_unit() const;
  void set_time_unit(const ::std::string& value);
  #if LANG_CXX11
  void set_time_unit(::std::string&& value);
  #endif
  void set_time_unit(const char* value);
  void set_time_unit(const char* value, size_t size);
  ::std::string* mutable_time_unit();
  ::std::string* release_time_unit();
  void set_allocated_time_unit(::std::string* time_unit);

  // optional float cpu = 3;
  bool has_cpu() const;
  void clear_cpu();
  static const int kCpuFieldNumber = 3;
  float cpu() const;
  void set_cpu(float value);

  // optional float gpu = 4;
  bool has_gpu() const;
  void clear_gpu();
  static const int kGpuFieldNumber = 4;
  float gpu() const;
  void set_gpu(float value);

  // optional float dsp = 5;
  bool has_dsp() const;
  void clear_dsp();
  static const int kDspFieldNumber = 5;
  float dsp() const;
  void set_dsp(float value);

  // optional float npu = 6;
  bool has_npu() const;
  void clear_npu();
  static const int kNpuFieldNumber = 6;
  float npu() const;
  void set_npu(float value);

  // optional float cpu2 = 7;
  bool has_cpu2() const;
  void clear_cpu2();
  static const int kCpu2FieldNumber = 7;
  float cpu2() const;
  void set_cpu2(float value);

  // optional float cpu3 = 8;
  bool has_cpu3() const;
  void clear_cpu3();
  static const int kCpu3FieldNumber = 8;
  float cpu3() const;
  void set_cpu3(float value);

  // optional float cpu4 = 9;
  bool has_cpu4() const;
  void clear_cpu4();
  static const int kCpu4FieldNumber = 9;
  float cpu4() const;
  void set_cpu4(float value);

  // @@protoc_insertion_point(class_scope:DS.network.Layer)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_time_unit();
  void clear_has_time_unit();
  void set_has_cpu();
  void clear_has_cpu();
  void set_has_gpu();
  void clear_has_gpu();
  void set_has_dsp();
  void clear_has_dsp();
  void set_has_npu();
  void clear_has_npu();
  void set_has_cpu2();
  void clear_has_cpu2();
  void set_has_cpu3();
  void clear_has_cpu3();
  void set_has_cpu4();
  void clear_has_cpu4();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr time_unit_;
  float cpu_;
  float gpu_;
  float dsp_;
  float npu_;
  float cpu2_;
  float cpu3_;
  float cpu4_;
  friend struct ::protobuf_DS_2eproto::TableStruct;
  friend void ::protobuf_DS_2eproto::InitDefaultsnetwork_LayerImpl();
};
// -------------------------------------------------------------------

class network : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DS.network) */ {
 public:
  network();
  virtual ~network();

  network(const network& from);

  inline network& operator=(const network& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  network(network&& from) noexcept
    : network() {
    *this = ::std::move(from);
  }

  inline network& operator=(network&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const network& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const network* internal_default_instance() {
    return reinterpret_cast<const network*>(
               &_network_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(network* other);
  friend void swap(network& a, network& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline network* New() const PROTOBUF_FINAL { return New(NULL); }

  network* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const network& from);
  void MergeFrom(const network& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(network* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef network_Layer Layer;

  // accessors -------------------------------------------------------

  // repeated .DS.network.Layer layer = 2;
  int layer_size() const;
  void clear_layer();
  static const int kLayerFieldNumber = 2;
  const ::DS::network_Layer& layer(int index) const;
  ::DS::network_Layer* mutable_layer(int index);
  ::DS::network_Layer* add_layer();
  ::google::protobuf::RepeatedPtrField< ::DS::network_Layer >*
      mutable_layer();
  const ::google::protobuf::RepeatedPtrField< ::DS::network_Layer >&
      layer() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:DS.network)
 private:
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::DS::network_Layer > layer_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct ::protobuf_DS_2eproto::TableStruct;
  friend void ::protobuf_DS_2eproto::InitDefaultsnetworkImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// network_Layer

// optional string name = 1;
inline bool network_Layer::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void network_Layer::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void network_Layer::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void network_Layer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& network_Layer::name() const {
  // @@protoc_insertion_point(field_get:DS.network.Layer.name)
  return name_.GetNoArena();
}
inline void network_Layer::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DS.network.Layer.name)
}
#if LANG_CXX11
inline void network_Layer::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DS.network.Layer.name)
}
#endif
inline void network_Layer::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DS.network.Layer.name)
}
inline void network_Layer::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DS.network.Layer.name)
}
inline ::std::string* network_Layer::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:DS.network.Layer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* network_Layer::release_name() {
  // @@protoc_insertion_point(field_release:DS.network.Layer.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void network_Layer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:DS.network.Layer.name)
}

// optional string time_unit = 2;
inline bool network_Layer::has_time_unit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void network_Layer::set_has_time_unit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void network_Layer::clear_has_time_unit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void network_Layer::clear_time_unit() {
  time_unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_time_unit();
}
inline const ::std::string& network_Layer::time_unit() const {
  // @@protoc_insertion_point(field_get:DS.network.Layer.time_unit)
  return time_unit_.GetNoArena();
}
inline void network_Layer::set_time_unit(const ::std::string& value) {
  set_has_time_unit();
  time_unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DS.network.Layer.time_unit)
}
#if LANG_CXX11
inline void network_Layer::set_time_unit(::std::string&& value) {
  set_has_time_unit();
  time_unit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DS.network.Layer.time_unit)
}
#endif
inline void network_Layer::set_time_unit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_time_unit();
  time_unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DS.network.Layer.time_unit)
}
inline void network_Layer::set_time_unit(const char* value, size_t size) {
  set_has_time_unit();
  time_unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DS.network.Layer.time_unit)
}
inline ::std::string* network_Layer::mutable_time_unit() {
  set_has_time_unit();
  // @@protoc_insertion_point(field_mutable:DS.network.Layer.time_unit)
  return time_unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* network_Layer::release_time_unit() {
  // @@protoc_insertion_point(field_release:DS.network.Layer.time_unit)
  clear_has_time_unit();
  return time_unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void network_Layer::set_allocated_time_unit(::std::string* time_unit) {
  if (time_unit != NULL) {
    set_has_time_unit();
  } else {
    clear_has_time_unit();
  }
  time_unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time_unit);
  // @@protoc_insertion_point(field_set_allocated:DS.network.Layer.time_unit)
}

// optional float cpu = 3;
inline bool network_Layer::has_cpu() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void network_Layer::set_has_cpu() {
  _has_bits_[0] |= 0x00000004u;
}
inline void network_Layer::clear_has_cpu() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void network_Layer::clear_cpu() {
  cpu_ = 0;
  clear_has_cpu();
}
inline float network_Layer::cpu() const {
  // @@protoc_insertion_point(field_get:DS.network.Layer.cpu)
  return cpu_;
}
inline void network_Layer::set_cpu(float value) {
  set_has_cpu();
  cpu_ = value;
  // @@protoc_insertion_point(field_set:DS.network.Layer.cpu)
}

// optional float gpu = 4;
inline bool network_Layer::has_gpu() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void network_Layer::set_has_gpu() {
  _has_bits_[0] |= 0x00000008u;
}
inline void network_Layer::clear_has_gpu() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void network_Layer::clear_gpu() {
  gpu_ = 0;
  clear_has_gpu();
}
inline float network_Layer::gpu() const {
  // @@protoc_insertion_point(field_get:DS.network.Layer.gpu)
  return gpu_;
}
inline void network_Layer::set_gpu(float value) {
  set_has_gpu();
  gpu_ = value;
  // @@protoc_insertion_point(field_set:DS.network.Layer.gpu)
}

// optional float dsp = 5;
inline bool network_Layer::has_dsp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void network_Layer::set_has_dsp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void network_Layer::clear_has_dsp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void network_Layer::clear_dsp() {
  dsp_ = 0;
  clear_has_dsp();
}
inline float network_Layer::dsp() const {
  // @@protoc_insertion_point(field_get:DS.network.Layer.dsp)
  return dsp_;
}
inline void network_Layer::set_dsp(float value) {
  set_has_dsp();
  dsp_ = value;
  // @@protoc_insertion_point(field_set:DS.network.Layer.dsp)
}

// optional float npu = 6;
inline bool network_Layer::has_npu() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void network_Layer::set_has_npu() {
  _has_bits_[0] |= 0x00000020u;
}
inline void network_Layer::clear_has_npu() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void network_Layer::clear_npu() {
  npu_ = 0;
  clear_has_npu();
}
inline float network_Layer::npu() const {
  // @@protoc_insertion_point(field_get:DS.network.Layer.npu)
  return npu_;
}
inline void network_Layer::set_npu(float value) {
  set_has_npu();
  npu_ = value;
  // @@protoc_insertion_point(field_set:DS.network.Layer.npu)
}

// optional float cpu2 = 7;
inline bool network_Layer::has_cpu2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void network_Layer::set_has_cpu2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void network_Layer::clear_has_cpu2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void network_Layer::clear_cpu2() {
  cpu2_ = 0;
  clear_has_cpu2();
}
inline float network_Layer::cpu2() const {
  // @@protoc_insertion_point(field_get:DS.network.Layer.cpu2)
  return cpu2_;
}
inline void network_Layer::set_cpu2(float value) {
  set_has_cpu2();
  cpu2_ = value;
  // @@protoc_insertion_point(field_set:DS.network.Layer.cpu2)
}

// optional float cpu3 = 8;
inline bool network_Layer::has_cpu3() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void network_Layer::set_has_cpu3() {
  _has_bits_[0] |= 0x00000080u;
}
inline void network_Layer::clear_has_cpu3() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void network_Layer::clear_cpu3() {
  cpu3_ = 0;
  clear_has_cpu3();
}
inline float network_Layer::cpu3() const {
  // @@protoc_insertion_point(field_get:DS.network.Layer.cpu3)
  return cpu3_;
}
inline void network_Layer::set_cpu3(float value) {
  set_has_cpu3();
  cpu3_ = value;
  // @@protoc_insertion_point(field_set:DS.network.Layer.cpu3)
}

// optional float cpu4 = 9;
inline bool network_Layer::has_cpu4() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void network_Layer::set_has_cpu4() {
  _has_bits_[0] |= 0x00000100u;
}
inline void network_Layer::clear_has_cpu4() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void network_Layer::clear_cpu4() {
  cpu4_ = 0;
  clear_has_cpu4();
}
inline float network_Layer::cpu4() const {
  // @@protoc_insertion_point(field_get:DS.network.Layer.cpu4)
  return cpu4_;
}
inline void network_Layer::set_cpu4(float value) {
  set_has_cpu4();
  cpu4_ = value;
  // @@protoc_insertion_point(field_set:DS.network.Layer.cpu4)
}

// -------------------------------------------------------------------

// network

// optional string name = 1;
inline bool network::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void network::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void network::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void network::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& network::name() const {
  // @@protoc_insertion_point(field_get:DS.network.name)
  return name_.GetNoArena();
}
inline void network::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DS.network.name)
}
#if LANG_CXX11
inline void network::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DS.network.name)
}
#endif
inline void network::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DS.network.name)
}
inline void network::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DS.network.name)
}
inline ::std::string* network::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:DS.network.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* network::release_name() {
  // @@protoc_insertion_point(field_release:DS.network.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void network::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:DS.network.name)
}

// repeated .DS.network.Layer layer = 2;
inline int network::layer_size() const {
  return layer_.size();
}
inline void network::clear_layer() {
  layer_.Clear();
}
inline const ::DS::network_Layer& network::layer(int index) const {
  // @@protoc_insertion_point(field_get:DS.network.layer)
  return layer_.Get(index);
}
inline ::DS::network_Layer* network::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:DS.network.layer)
  return layer_.Mutable(index);
}
inline ::DS::network_Layer* network::add_layer() {
  // @@protoc_insertion_point(field_add:DS.network.layer)
  return layer_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::DS::network_Layer >*
network::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:DS.network.layer)
  return &layer_;
}
inline const ::google::protobuf::RepeatedPtrField< ::DS::network_Layer >&
network::layer() const {
  // @@protoc_insertion_point(field_list:DS.network.layer)
  return layer_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DS

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DS_2eproto__INCLUDED
